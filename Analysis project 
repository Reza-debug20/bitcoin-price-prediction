# src/model.py
import sys
from pathlib import Path
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from reportlab.platypus import SimpleDocTemplate, Image, Paragraph, Spacer
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet
import os

def find_csv():
    """
    Try several candidate locations to find bitcoin_prices.csv.
    You can also pass full path as first command-line argument:
        python src/model.py /full/path/to/bitcoin_prices.csv
    """
    candidates = []

    # 1) If user passed a path as first argument -> respect it
    if len(sys.argv) > 1:
        candidates.append(Path(sys.argv[1]))

    # 2) Paths relative to this script (src/)
    script_path = Path(__file__).resolve()
    project_root = script_path.parents[1] if len(script_path.parents) >= 2 else script_path.parent
    candidates += [
        project_root / "data" / "bitcoin_prices.csv",       # project_root/data/...
        script_path.parent / "data" / "bitcoin_prices.csv",# src/data (unlikely)
        Path.cwd() / "data" / "bitcoin_prices.csv",        # ./data/...
        Path.cwd() / "bitcoin_prices.csv",                 # ./bitcoin_prices.csv
        Path("/storage/emulated/0/Pydroid3/files/bitcoin_prices.csv"),  # common Pydroid path
        Path("/sdcard/bitcoin_prices.csv"),
    ]

    for p in candidates:
        if p and p.exists():
            print(f"[INFO] Using CSV file: {p}")
            return p

    # If none found, show helpful message and where we looked
    print("[ERROR] bitcoin_prices.csv not found. Paths checked:")
    for p in candidates:
        print("  -", p)
    raise FileNotFoundError("Place bitcoin_prices.csv in one of the above locations or pass its full path as argument.")

def detect_columns(df):
    # find date column
    date_candidates = ['date', 'Date', 'timestamp', 'time', 'datetime']
    date_col = next((c for c in date_candidates if c in df.columns), None)

    # find price column
    price_candidates = ['price_usd', 'price', 'close', 'Close', 'close_usd']
    price_col = next((c for c in price_candidates if c in df.columns), None)

    return date_col, price_col

def evaluate_model(name, y_true, y_pred):
    mae = mean_absolute_error(y_true, y_pred)
    mse = mean_squared_error(y_true, y_pred)
    r2 = r2_score(y_true, y_pred)
    print(f"\n{name} Performance:")
    print(f" - MAE: {mae:.2f}")
    print(f" - MSE: {mse:.2f}")
    print(f" - R²: {r2:.2f}")
    return {"name": name, "mae": mae, "mse": mse, "r2": r2}

def main():
    csv_path = find_csv()
    data = pd.read_csv(csv_path)

    # detect columns
    date_col, price_col = detect_columns(data)
    if date_col is None or price_col is None:
        print("[ERROR] Couldn't find 'date' or 'price' column automatically.")
        print("Available columns:", list(data.columns))
        sys.exit(1)

    # parse date column
    data[date_col] = pd.to_datetime(data[date_col], errors='coerce')
    if data[date_col].isna().all():
        print(f"[ERROR] Failed to parse column '{date_col}' as dates.")
        sys.exit(1)

    # create 'days' numeric feature
    data = data.sort_values(by=date_col).reset_index(drop=True)
    data['days'] = (data[date_col] - data[date_col].min()).dt.days

    features = data[['days']]
    target = data[price_col]

    # train-test split
    X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

    # train models
    linear_model = LinearRegression()
    linear_model.fit(X_train, y_train)

    random_forest_model = RandomForestRegressor(n_estimators=100, random_state=42)
    random_forest_model.fit(X_train, y_train)

    # evaluate
    linear_preds = linear_model.predict(X_test)
    rf_preds = random_forest_model.predict(X_test)

    linear_scores = evaluate_model("Linear Regression", y_test, linear_preds)
    rf_scores = evaluate_model("Random Forest", y_test, rf_preds)

    # predict next day
    next_day_val = int(data['days'].max() + 1)
    linear_future = linear_model.predict([[next_day_val]])[0]
    rf_future = random_forest_model.predict([[next_day_val]])[0]

    print(f"\nTomorrow's predicted price (Linear Regression): ${linear_future:.2f}")
    print(f"Tomorrow's predicted price (Random Forest): ${rf_future:.2f}")

    # prepare output folders
    reports_dir = Path(csv_path).parents[0].parent / "reports"  # prefer project_root/reports when possible
    # fallback: if above doesn't make sense, put reports next to CSV
    if not reports_dir.exists():
        # try project root
        possible_root = Path(__file__).resolve().parents[1] if len(Path(__file__).resolve().parents) >= 2 else Path.cwd()
        reports_dir = possible_root / "reports"
    reports_dir.mkdir(parents=True, exist_ok=True)

    chart_path = reports_dir / "bitcoin_chart.png"
    pdf_path = reports_dir / "bitcoin_report.pdf"

    # plotting
    plt.figure(figsize=(10,5))
    plt.plot(data[date_col], target, label="Real Price", linewidth=2)
    plt.plot(data[date_col], linear_model.predict(features), label="Linear Regression", linestyle="--")
    plt.plot(data[date_col], random_forest_model.predict(features), label="Random Forest", linestyle="--")
    plt.xlabel("Date")
    plt.ylabel("Bitcoin Price (USD)")
    plt.title("Bitcoin Price Prediction: Linear Regression vs Random Forest")
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.savefig(chart_path)
    try:
        plt.show()
    except Exception:
        # in headless envs plt.show() may fail; that's fine
        pass
    plt.close()

    # build PDF
    doc = SimpleDocTemplate(str(pdf_path), pagesize=A4)
    style = getSampleStyleSheet()
    elements = [
        Paragraph("Bitcoin Price Prediction Report", style["Title"]),
        Spacer(1, 10),
        Paragraph(f"Dataset: {csv_path}", style["Normal"]),
        Spacer(1, 6),
        Paragraph(f"Linear Regression - MAE: {linear_scores['mae']:.2f}, R²: {linear_scores['r2']:.2f}", style["Normal"]),
        Paragraph(f"Random Forest - MAE: {rf_scores['mae']:.2f}, R²: {rf_scores['r2']:.2f}", style["Normal"]),
        Spacer(1, 8),
        Paragraph(f"Tomorrow's predicted price (Linear Regression): ${linear_future:.2f}", style["Normal"]),
        Paragraph(f"Tomorrow's predicted price (Random Forest): ${rf_future:.2f}", style["Normal"]),
        Spacer(1, 12),
        Paragraph("Comparison chart:", style["Normal"]),
        Spacer(1, 8),
        Image(str(chart_path), width=400, height=250),
    ]

    doc.build(elements)

    print(f"[OK] Chart saved to: {chart_path}")
    print(f"[OK] PDF report saved to: {pdf_path}")

if __name__ == "__main__":
    main()